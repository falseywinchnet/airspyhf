1. **Analyze current driver architecture**
   - **Status**: Initial pass completed.
   - Read existing C/C++ sources under `libairspyhf/` and `tools/`.
   - Documented major modules and identified heavy use of `libusb` and pthreads.
   - External dependencies noted: `libusb`, `pthread`, Windows-specific USB code.
   - Still need a deeper look at DSP components and platform differences.

2. **Define Rust project structure**
   - **Status**: In progress.
   - Created a Cargo workspace `rust-migration` containing the `libairspyhf` crate.
   - Exposes a C ABI via `extern "C"` functions (open/close, list devices, open by serial).
   - CLI utilities and examples are not yet ported.

3. **Port functionality module by module**
   - **Status**: Started.
   - Implemented device open/close using `nusb` with basic unit test.
   - Added `airspyhf_list_devices` and `airspyhf_open_sn` for enumeration.
   - Remaining C functions for streaming, configuration and DSP are unported.
   - Plan to replace pthreads with `std::thread` or an async runtime.

4. **Documentation and style**
   - **Status**: Minimal docs in place.
   - Need comprehensive `///` documentation for public items and inline comments.

5. **Testing and validation**
   - **Status**: Skeleton test for open/close.
   - Need unit tests for `airspyhf_list_devices` and `airspyhf_open_sn`.
   - Must design integration tests that mirror the original driver's behaviour.
   - Property-based tests are planned but not implemented.

6. **Formal verification efforts**
   - **Status**: Not started.
   - Set up `cargo clippy`, `cargo fmt` with warnings denied.
   - Investigate `Prusti` or `Creusot` once more code is available.

7. **Cross-platform build configuration**
   - **Status**: Pending.
   - Ensure `nusb` works on Linux, Windows, and macOS.
   - Provide CMake/pkg-config files for C++ consumers.

8. **Continuous Integration setup**
   - **Status**: Pending.
   - Add GitHub Actions to build and test across platforms and run linting.

9. **Migration guide**
   - **Status**: Pending.
   - Document API differences and provide examples for C++ developers.

10. **Final review and publish**
    - **Status**: Pending.
    - Audit the code, ensure tests pass on all targets, and prepare release tags.
